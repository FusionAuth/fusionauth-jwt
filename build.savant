/*
 * Copyright (c) 2016-2023, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

jacksonVersion = "2.14.0"

project(group: "io.fusionauth", name: "fusionauth-jwt", version: "6.0.0", licenses: ["ApacheV2_0"]) {

  workflow {
    fetch {
      // 1. Check local Savant cache
      cache()
      // 2. Check public Savant repo
      url(url: "https://repository.savantbuild.org")
      // 3. Pull it from Maven central
      maven()
    }
    publish {
      cache()
    }
  }

  publishWorkflow {
    subversion(repository: "https://svn.savantbuild.org")
  }

  dependencies {
    group(name: "compile") {
      dependency(id: "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
      dependency(id: "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
      dependency(id: "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
    }
    group(name: "test-compile", export: false) {
      dependency(id: "org.bouncycastle:bc-fips:1.0.2+P1")
      dependency(id: "org.testng:testng:7.3.0")
    }
  }

  publications {
    standard()
  }
}

/*
 * Define Plugins
 */
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:2.0.0-RC.6")
java = loadPlugin(id: "org.savantbuild.plugin:java:2.0.0-RC.6")
javaTestNG = loadPlugin(id: "org.savantbuild.plugin:java-testng:2.0.0-RC.6")
groovy = loadPlugin(id: "org.savantbuild.plugin:groovy:2.0.0-RC.6")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:2.0.0-RC.7")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:2.0.0-RC.6")

/*
 * Plugin Settings
 */
java.settings.javaVersion = "1.8"
groovy.settings.javaVersion = "1.8"
groovy.settings.groovyVersion = "2.2"
javaTestNG.settings.javaVersion = "1.8"

/*
 * Targets
 */
target(name: "clean", description: "Cleans the project") {
  java.clean()
}

target(name: "compile", description: "Compiles the project") {
  java.compile()
}

target(name: "jar", description: "JARs the project", dependsOn: ["compile"]) {
  java.jar()
}

target(name: "test", description: "Runs the project's tests", dependsOn: ["jar"]) {
  // Uncomment to debug
//    javaTestNG.settings.jvmArguments += "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"
  javaTestNG.settings.listeners = [ "io.fusionauth.jwt.TestNGAnnotationTransformer" ]
  javaTestNG.test()
}

target(name: "doc", description: "Generate the project's JavaDoc", dependsOn: ["jar"]) {
  java.document()
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["test"]) {
  dependency.integrate()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["test"]) {
  release.release()
}

target(name: "publish", description: "Publish to MVN repo", dependsOn: ["clean", "compile"]) {
  if (new ProcessBuilder('mvn', 'clean', 'deploy', '-Prelease').inheritIO().start().waitFor() != 0) {
    fail("deploy failed")
  }
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}
